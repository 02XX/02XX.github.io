import{_ as t,c as o,aA as s,o as a}from"./chunks/framework.DyPz110q.js";const g=JSON.parse('{"title":"674. 最长连续递增序列","description":"","frontmatter":{"title":"674. 最长连续递增序列","categories":"leetcode","tags":["Array"],"date":"2025-02-25T13:54:09.297Z","updated":"2025-02-25T13:54:09.297Z"},"headers":[],"relativePath":"674. 最长连续递增序列.md","filePath":"674. 最长连续递增序列.md"}'),n={name:"674. 最长连续递增序列.md"};function r(l,e,c,d,i,p){return a(),o("div",null,e[0]||(e[0]=[s('<h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p><a href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence" target="_blank" rel="noreferrer">674. 最长连续递增序列</a></p><p>给定一个未经排序的整数数组，找到最长且<strong>连续递增的子序列</strong> ，并返回该序列的长度。</p><p><strong>连续递增的子序列</strong> 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l &lt; r</code>）确定，如果对于每个 <code>l &lt;= i &lt; r</code>，都有 <code>nums[i] &lt; nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,3,5,4,7] <strong>输出：</strong> 3 <strong>解释：</strong> 最长连续递增序列是 [1,3,5], 长度为3。 尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,2,2,2,2] <strong>输出：</strong> 1 <strong>解释：</strong> 最长连续递增序列是 [2], 长度为1。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div>',13)]))}const h=t(n,[["render",r]]);export{g as __pageData,h as default};
